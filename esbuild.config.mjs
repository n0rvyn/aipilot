import esbuild from "esbuild";
import process from "process";
import builtins from "builtin-modules";
import fs from "fs";
import path from "path";

const banner =
`/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/
`;

const prod = (process.argv[2] === 'production');

// Plugin to extract CSS to a separate file
const extractCssPlugin = {
    name: 'extract-css',
    setup(build) {
        // Store all CSS content
        let cssContent = '';
        
        // Intercept CSS imports
        build.onLoad({ filter: /\.css$/ }, async (args) => {
            const css = await fs.promises.readFile(args.path, 'utf8');
            cssContent += css + '\n';
            
            // Return empty JS instead of export default
            return {
                contents: 'export {}',
                loader: 'js',
            };
        });
        
        // Write the CSS file at the end of the build
        build.onEnd(async () => {
            await fs.promises.writeFile(
                path.join(process.cwd(), 'dist', 'styles.css'),
                cssContent
            );
            console.log('CSS extracted to dist/styles.css');
        });
    },
};

try {
    await esbuild.build({
        banner: {
            js: banner,
        },
        entryPoints: ['src/main.ts'],
        bundle: true,
        external: [
            'obsidian',
            'electron',
            '@codemirror/autocomplete',
            '@codemirror/collab',
            '@codemirror/state',
            '@codemirror/view',
            ...builtins
        ],
        format: 'cjs',
        target: 'es2016',
        logLevel: "info",
        sourcemap: prod ? false : 'inline',
        treeShaking: true,
        outfile: 'dist/main.js',
        plugins: [extractCssPlugin],
        loader: {
            '.css': 'text'
        }
    });

    if (!prod) {
        console.log('Build complete, watching for changes...');
    }
} catch (error) {
    console.error('Build failed:', error);
    process.exit(1);
} 